Void Pointer:-
-----------
Void pointers are also known as generic
pointers. These pointers can be used to
point to the memory address of any variable
of any data type.
for derefrencing the void pointer we need
to typecast.

Example:
--------
#include <stdio.h>  
int main()  
{  
    int i=15;  
    void *ptr;
    ptr=&i;  
    printf("%d",*(int*)ptr);
    return 0;  
}

Dangling Pointer:
----------------
A pointer pointing to a memory
location that has been deleted
(or freed) is called a dangling
pointer

Code:
----
#include<stdio.h>  
int main()  
{  
   int *ptr=(int *)malloc(sizeof(int));  
   free(ptr);  // After free call, ptr becomes a dangling pointer
   ptr=NULL;   // the pointer ptr is not dangling anymore as it is pointing to nothing
   return 0;  
}

NULL Pointer:
-----------
The Null pointer is a pointer that
is initialized with a Null value
at the time of pointer declaration.

Code:
----
#include<stdio.h>
int main()
{
   int *ptr=NULL;
   printf("The value of ptr is: %d\n",ptr);
   return 0;
}

Smart Pointer:
-----------
Smart pointers help manage dynamic memory and 
other resources more safely and efficiently 
than traditional raw pointers.Smart pointers 
ensure that resources are properly cleaned up
when they are no longer needed, preventing issues
like memory leaks and dangling pointers.

unique_ptr: 
 Use for sole ownership of a resource. It ensures
that the resource is deleted when the 
std::unique_ptr goes out of scope.Cannot be copied, only moved.

Ex:#include <iostream>
#include <memory>

class MyClass {
public:
    MyClass() { std::cout << "MyClass constructed\n"; }
    ~MyClass() { std::cout << "MyClass destructed\n"; }
};

int main() {
    std::unique_ptr<MyClass> ptr1 = std::make_unique<MyClass>(); // Allocates and owns MyClass
    // std::unique_ptr<MyClass> ptr2 = ptr1; // Error: cannot copy unique_ptr
    std::unique_ptr<MyClass> ptr2 = std::move(ptr1); // Transfers ownership to ptr2
    return 0; // MyClass is destructed when ptr2 goes out of scope
}

shared_ptr:
Use for shared ownership of a resource, with automatic 
reference counting to ensure the resource is deleted 
when the last std::shared_ptr goes out of scope.
Can be copied,

#include <iostream>
#include <memory>

class MyClass {
public:
    MyClass() { std::cout << "MyClass constructed\n"; }
    ~MyClass() { std::cout << "MyClass destructed\n"; }
};

int main() {
    std::shared_ptr<MyClass> ptr1 = std::make_shared<MyClass>(); // Allocates and owns MyClass
    {
        std::shared_ptr<MyClass> ptr2 = ptr1; // Shared ownership with ptr1
        std::cout << "Shared ownership count: " << ptr1.use_count() << '\n'; // Prints 2
    }
    std::cout << "Shared ownership count: " << ptr1.use_count() << '\n'; // Prints 1
    return 0; // MyClass is destructed when the last shared_ptr (ptr1) goes out of scope
}

weak_ptr:
Use to hold a non-owning reference to an 
object managed by std::shared_ptr, 
preventing circular references.

#include <iostream>
#include <memory>

class MyClass {
public:
    std::shared_ptr<MyClass> other;
    ~MyClass() { std::cout << "MyClass destructed\n"; }
};

int main() {
    std::shared_ptr<MyClass> ptr1 = std::make_shared<MyClass>();
    std::shared_ptr<MyClass> ptr2 = std::make_shared<MyClass>();

    ptr1->other = ptr2;
    ptr2->other = ptr1; // Circular reference with shared_ptr would cause a memory leak

    // Instead, use weak_ptr to avoid circular reference
    ptr1->other = std::weak_ptr<MyClass>(ptr2);
    ptr2->other = std::weak_ptr<MyClass>(ptr1);
    return 0; // Both MyClass instances are destructed correctly
}
