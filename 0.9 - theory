Tempelate:
---------
Templates provide a mechanism for writing generic,
type-safe, and efficient code. They enhance code
reusability and follow a DRY principle.
We can say class is also a template

Ex: Function
#include <iostream>

// Function template
template <typename T>
T add(T a, T b) {
    return a + b;
}

int main() {
    std::cout << add(3, 4) << std::endl;         // Outputs 7 (int)
    std::cout << add(3.5, 4.5) << std::endl;     // Outputs 8.0 (double)
    return 0;
}

EX: class
#include <iostream>

// Class template
template <typename T>
class MyClass {
private:
    T data;
public:
    MyClass(T data) : data(data) {}
    T getData() { return data; }
};

int main() {
    MyClass<int> intObj(5);
    MyClass<double> doubleObj(5.5);

    std::cout << intObj.getData() << std::endl;       // Outputs 5
    std::cout << doubleObj.getData() << std::endl;    // Outputs 5.5
    return 0;
}

New and Malloc:
--------------
malloc: is a C function that allocates raw,
uninitialized memory and requires explicit
type casting and deallocation using free.

new :is a C++ operator that allocates and 
initializes memory, calls constructors and 
destructors, and can be overloaded for custom
memory management. It provides better type safety 
and error handling through exceptions.

Lambda:
------
Lambda expressions provide a way to define
anonymous function objects directly in your code. 
They are useful for creating short, inline functions.
Ex:

#include <iostream>

int main() {
    auto add = [](int a, int b) -> int {
        return a + b;
    };
    std::cout << "5 + 3 = " << add(5, 3) << std::endl;
    return 0;
}

What is an abstract class in C++?
          -----------------
An abstract class is a class that is 
designed to be specifically used as a 
base class. An abstract class contains at
least one pure virtual function. You 
declare a pure virtual function by using
a pure specifier ( = 0 ) in the declaration
of a virtual member function in the class declaration.

Pure virtual function-> do nothing func
-------------------
It is use to create an abstract class.

What is a virtual function in C++?
          -----------------
A virtual function is a base class memberfunction
that you can redefine in a derived 
class to achieve polymorphism. You can declare
the function in the base class using the virtual keyword

What is virtual keyword?
       ---------
The virtual keyword is used to modify a method, 
allow it to be overridden in a derived class.

vTable:
-------
It is a table that contains the memory addresses
of all virtual functions of a class in the order
in which they are declared in a class. This table
is used to resolve function calls in dynamic/late
binding manner.

vPTR:
-----
When you create an object of a class which contains
virtual function then a hidden pointer gets created
automatically in that object by the compiler.

What is static keyword in C++?
        --------------
        
The static keyword belongs to the class. for calling the
static DM or DF we don't need to create the object.
Static function can access static DM only.

What is inline function?
       --------
An inline function is the compiler copies
the code from the function definition directly
into the code of the calling function rather
than creating a separate set of instructions
in memory.

Code:
-----#include <iostream>
using namespace std;
inline int cube(int s)
{
    return s*s*s;
}
int main()
{
    cout << "The cube of 3 is: " << cube(3) << "\n";
    return 0;
} //Output: The cube of 3 is: 27
