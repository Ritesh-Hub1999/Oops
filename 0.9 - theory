Macro:
---------
macros are a feature of the preprocessor and
are used to define constant values, functions,
or blocks of code that can be reused throughout 
a program. Macros are defined using the #define 

Tempelate:
---------
Templates provide a mechanism for writing generic,
type-safe, and efficient code. They enhance code
reusability and follow a DRY principle.
We can say class is also a template

Ex: Function
#include <iostream>

// Function template
template <typename T>
T add(T a, T b) {
    return a + b;
}

int main() {
    std::cout << add(3, 4) << std::endl;         // Outputs 7 (int)
    std::cout << add(3.5, 4.5) << std::endl;     // Outputs 8.0 (double)
    return 0;
}

EX: class
#include <iostream>

// Class template
template <typename T>
class MyClass {
private:
    T data;
public:
    MyClass(T data) : data(data) {}
    T getData() { return data; }
};

int main() {
    MyClass<int> intObj(5);
    MyClass<double> doubleObj(5.5);

    std::cout << intObj.getData() << std::endl;       // Outputs 5
    std::cout << doubleObj.getData() << std::endl;    // Outputs 5.5
    return 0;
}

New and Malloc:
--------------
malloc: is a C function that allocates raw,
uninitialized memory and requires explicit
type casting and deallocation using free.

new :is a C++ operator that allocates and 
initializes memory, calls constructors and 
destructors, and can be overloaded for custom
memory management. It provides better type safety 
and error handling through exceptions.

Lambda:
------
Lambda expressions provide a way to define
anonymous function objects directly in your code. 
They are useful for creating short, inline functions.
Ex:

#include <iostream>

int main() {
    auto add = [](int a, int b) -> int {
        return a + b;
    };
    std::cout << "5 + 3 = " << add(5, 3) << std::endl;
    return 0;
}

What is an abstract class in C++?
          -----------------
An abstract class is a class that is 
designed to be specifically used as a 
base class. An abstract class contains at
least one pure virtual function. You 
declare a pure virtual function by using
a pure specifier ( = 0 ) in the declaration
of a virtual member function in the class declaration.

Pure virtual function-> do nothing func
-------------------
It is use to create an abstract class.

What is a virtual function in C++?
          -----------------
A virtual function is a base class memberfunction
that you can redefine in a derived 
class to achieve polymorphism. You can declare
the function in the base class using the virtual keyword

What is virtual keyword?
       ---------
The virtual keyword is used to modify a method, 
allow it to be overridden in a derived class.

what is virtual function?
--------------------
To achive dynamic polymorphism. which is 
ability to call derived class function 
using Base class pointer or reference.
imp: when we needto call derived class func
from a base class. with pointer or ref we need
to use virtual func.

ex:

class Base{
public:
    virtual void func(){
        cout<<"BASE:: func called "<<endl;
    }
};

class Derived:public Base{
public:
    void func(){
        cout<<"DERIVED:: func called "<<endl;
    }
};

int main(){
    //Base *b = new Derived();
    //b->func();
    Derived d;
    Base &b = d;
    b.func();
}
Note: if we dont put virtual func it will
going to call base func only

Virtual Destructor:
------------
A virtual destructor is a special form of
destructor that is declared as virtual in a base class.

Making base class destructor virtual guarantees that the
object of derived class is destructed properly,

vTable:
-------
It is a table that contains the memory addresses
of all virtual functions of a class in the order
in which they are declared in a class. This table
is used to resolve function calls in dynamic/late
binding manner.

vPTR:
-----
When you create an object of a class which contains
virtual function then a hidden pointer gets created
automatically in that object by the compiler.

What is static keyword in C++?
        --------------
        
The static keyword belongs to the class. for calling the
static DM or DF we don't need to create the object.
Static function can access static DM only.

What is inline function?
       --------
An inline function is the compiler copies
the code from the function definition directly
into the code of the calling function rather
than creating a separate set of instructions
in memory.

Code:
-----#include <iostream>
using namespace std;
inline int cube(int s)
{
    return s*s*s;
}
int main()
{
    cout << "The cube of 3 is: " << cube(3) << "\n";
    return 0;
} //Output: The cube of 3 is: 27

What is Token?
-------------
 a token is the smallest meaningful unit of
code that the compiler understands. Tokens
are the building blocks of a C++ program.
Keywords – Reserved words that have special
meanings (e.g., int, return, class, if, while).

Identifiers – Names given to variables, functions,
and classes (e.g., myVariable, calculateSum).

Literals – Constant values
(e.g., 42, 3.14, "Hello").

Operators – Symbols that perform operations 
(e.g., +, -, *, &&, ==).

Punctuators – Special symbols used for syntax 
(e.g., {}, ;, ,, ()).

Comments – Non-executable text used for code 
documentation (// single-line, /* multi-line */).

Explain the "Rule of 5" in C++
------------------------------
If a class manages resources, it should define these 5 special functions:
Destructor
Copy constructor
Copy assignment operator
Move constructor
Move assignment operator

Example:
#include <iostream>

class MyClass {
private:
    int data;  // Simple integer (no dynamic allocation)

public:
    // Constructor
    MyClass(int value = 0) : data(value) {}

    // Destructor (Not really needed, but included for completeness)
    ~MyClass() {}

    // Copy Constructor
    MyClass(const MyClass& other) : data(other.data) {}

    // Copy Assignment Operator
    MyClass& operator=(const MyClass& other) {
        if (this != &other) {  // Prevent self-assignment
            data = other.data;
        }
        return *this;
    }

    // Move Constructor (Same as copy constructor in this case)
    MyClass(MyClass&& other) noexcept : data(other.data) {
        other.data = 0;  // Optional: Reset source object
    }

    // Move Assignment Operator (Same as copy assignment in this case)
    MyClass& operator=(MyClass&& other) noexcept {
        if (this != &other) {
            data = other.data;
            other.data = 0;  // Optional: Reset source object
        }
        return *this;
    }

    // Function to display value
    void show() const {
        std::cout << "Value: " << data << std::endl;
    }
};

int main() {
    MyClass obj1(10);
    MyClass obj2 = obj1;  // Calls Copy Constructor
    MyClass obj3;
    obj3 = obj1;  // Calls Copy Assignment Operator

    MyClass obj4 = std::move(obj1);  // Calls Move Constructor
    MyClass obj5;
    obj5 = std::move(obj2);  // Calls Move Assignment Operator

    obj3.show();
    obj4.show();
    obj5.show();

    return 0;
}
