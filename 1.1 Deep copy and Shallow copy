Shallow Copy:
-------
Here we are accessing the same memory.
Default copy constructor do the shallow
copy.
In shallow copy, an object is created by
simply copying the data of all variables
of the original object. This works well
if none of the variables of the object 
are defined in the heap section of memory.
If some variables are dynamically allocated
memory from heap section, then the copied 
object variable will also reference the same
memory location.This will create ambiguity 
and run-time errors,dangling pointer. Since
both objects will reference to the same memory
location, then change made by one will reflect
those change in another object as well. 
Since we wanted to create a replica of the object, 
this purpose will not be filled by Shallow copy. 

 Deep Copy:
 --------
 Here we create the copy of the Data Member
 we need to explicitly
define the copy constructor and assign dynamic
memory as well
In Deep copy, an object is created by 
copying data of all variables, and it
also allocates similar memory resources
with the same value to the object. In order
to perform Deep copy, we need to explicitly
define the copy constructor and assign dynamic
memory as well, if required. Also, it is required
to dynamically allocate memory to the variables in 
the other constructors, as well.

Shallow Copy Code:
-----
#include <iostream>

class ShallowCopy {
public:
int* data;

// Constructor
ShallowCopy(int value) {
    data = new int(value);  // Dynamically allocate memory
}

// Copy Constructor (Shallow Copy: Copies pointer, not data)
 ShallowCopy(const ShallowCopy& other) {
data = other.data;  // Both objects now share the same memory!
}

    // Destructor
 ~ShallowCopy() {
        delete data;  // When multiple objects delete the same memory, it causes a crash!
 }

void show() { std::cout << "Value: " << *data << std::endl; }
};

int main() {
ShallowCopy obj1(10);
ShallowCopy obj2 = obj1;  // Calls Shallow Copy Constructor

obj1.show();
obj2.show();

return 0;  // Both objects try to delete the same memory â†’ CRASH!
}

 
Deep Copy:
----------
//deep copy ka case mai new array banaya

#include <iostream>

class DeepCopy {
public:
    int* data;

    // Constructor
DeepCopy(int value) {
data = new int(value);  // Allocate memory
 }

// Copy Constructor (Deep Copy: Allocates new memory and copies the value)
 DeepCopy(const DeepCopy& other) {
data = new int(*other.data);  // Allocate new memory and copy value
}

    // Destructor
    ~DeepCopy() {
        delete data;  // Each object deletes its own memory safely
    }

    void show() { std::cout << "Value: " << *data << std::endl; }
};

int main() {
    DeepCopy obj1(10);
    DeepCopy obj2 = obj1;  // Calls Deep Copy Constructor

    obj1.show();
    obj2.show();

    return 0;  // No crash! Each object has its own copy of data.
}

