Shallow Copy:
-------
Here we are accessing the same memory.
Default copy constructor do the shallow
copy.
In shallow copy, an object is created by
simply copying the data of all variables
of the original object. This works well
if none of the variables of the object 
are defined in the heap section of memory.
If some variables are dynamically allocated
memory from heap section, then the copied 
object variable will also reference the same
memory location.This will create ambiguity 
and run-time errors,dangling pointer. Since
both objects will reference to the same memory
location, then change made by one will reflect
those change in another object as well. 
Since we wanted to create a replica of the object, 
this purpose will not be filled by Shallow copy. 

 Deep Copy:
 --------
 Here we create the copy of the Data Member
 we need to explicitly
define the copy constructor and assign dynamic
memory as well
In Deep copy, an object is created by 
copying data of all variables, and it
also allocates similar memory resources
with the same value to the object. In order
to perform Deep copy, we need to explicitly
define the copy constructor and assign dynamic
memory as well, if required. Also, it is required
to dynamically allocate memory to the variables in 
the other constructors, as well.

Shallow Copy Code:
-----
//yaha pa humna hero 1 ka hi name chage
kia tha and hero 2 ka bhi name 
change hogaya haiyahi hai shallow copy.

#include<iostream>
#include <cstring>
using namespace std;

#include <iostream>
#include <cstring>
using namespace std;

class pubg{
private:
  int health;

public:
  char *name;
  char level;

public:
  pubg(){
    name = new char[100];
  }

  void setHealth(int health){
    this->health = health;
  }

  void setLevel(char level){
    this->level = level;
  }
  void setName(char name[]){
    strcpy(this->name,name);
  }

  void print(){
    cout<<"Player name is:"<<name<<endl;
    cout<<"Player is in level:"<<level<<endl;
    cout<<"Player health is:"<<health<<endl;
    cout<<endl;
  }
};

int main(){
  pubg player1;
  player1.setHealth(10);
  player1.setLevel('A');
  char name[8] = "Dexture";
  player1.setName(name);
  player1.print();
  
  //using default copy constructor;
  pubg player2(player1);
  player2.print();

  player1.name[0]='R';
  player1.print();
  player2.print();
  
}

 
Deep Copy:
----------
//deep copy ka case mai new array banaya

#include <iostream>
#include <cstring>
using namespace std;

class pubg{
private:
  int health;

public:
  char *name;
  char level;

public:
  pubg(){
    name = new char[100];
  }
  //creating Deep copy
  //copy constructor
  pubg(pubg& temp) {
    char *ch = new char[strlen(temp.name) + 1];
    strcpy(ch, temp.name);
    this->name = ch;
    cout << "Copy constructor called" << endl;
    this->health = temp.health;
    this->level = temp.level;
  }
  void setHealth(int health){
    this->health = health;
  }

  void setLevel(char level){
    this->level = level;
  }
  void setName(char name[]){
    strcpy(this->name,name);
  }

  void print(){
    cout<<"Player name is:"<<name<<endl;
    cout<<"Player is in level:"<<level<<endl;
    cout<<"Player health is:"<<health<<endl;
    cout<<endl;
  }
};

int main(){
  pubg player1;
  player1.setHealth(10);
  player1.setLevel('A');
  char name[8] = "Dexture";
  player1.setName(name);
  player1.print();
  pubg player2(player1);
  player2.print();

  player1.name[0]='R';
  player1.print();
  player2.print();
  
}
