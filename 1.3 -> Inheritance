 Types Of Inheritance:-
1 -> Single inheritance
2 -> Multilevel inheritance
3 -> Multiple inheritance
4 -> Hierarchical inheritance
5 -> Hybrid inheritance

Base clasx constructor call first ay per child class

Single inheritance code:
------------------------
#include<iostream>
using namespace std;

class Animal{
public:
  int age;
  int weight;

  void speak(){
    cout<<"Animal is speaking"<<endl;
  }
};

class Dog: public Animal{

};



int main(){
  Dog d;
  d.speak();

}

Multilevel inheritance
----------------------
#include<iostream>
using namespace std;

class Animal{
public:
  int age;
  int weight;

  void speak(){
    cout<<"Animal is speaking"<<endl;
  }
};

class Dog: public Animal{

};

class labradour: public Dog{

};

int main(){
  Dog d;
  d.speak();

  Dog l;
  l.speak();
}

Multiple Inheritance:
----------------------
#include<iostream>
using namespace std;

class Animal{
public:
  int age;
  int weight;

  void Bark(){
    cout<<"Animal is Barking"<<endl;
  }
};

class Human{
public:
  void speak(){
    cout<<"Human is speaking"<<endl;
  }
};

class Hybrid: public Animal,public Human{

};

int main(){
  Hybrid obj1;
  obj1.speak();
  obj1.Bark();
}

Hierarchical Inheritance:
------------------------
#include <iostream>
using namespace std;
 
// base class
class Vehicle {
public:
    Vehicle() { cout << "This is a Vehicle\n"; }
};
 
// first sub class
class Car : public Vehicle {
};
 
// second sub class
class Bus : public Vehicle {
};
 
// main function
int main()
{
    // Creating object of sub class will
    // invoke the constructor of base class.
    Car obj1;
    Bus obj2;
    return 0;
}

Hybrid (Virtual) Inheritance:
---------------------------
#include <iostream>
using namespace std;
 
// base class
class Vehicle {
public:
    Vehicle() { cout << "This is a Vehicle\n"; }
};
 
// base class
class Fare {
public:
    Fare() { cout << "Fare of Vehicle\n"; }
};
 
// first sub class
class Car : public Vehicle {
};
 
// second sub class
class Bus : public Vehicle, public Fare {
};
 
// main function
int main()
{
    // Creating object of sub class will
    // invoke the constructor of base class.
    Bus obj2;
    return 0;
}

Inhertitance ambiguity:
----------------------
#include<iostream>
using namespace std;

class A{
  public:
  void func(){
    cout<<"I am in A"<<endl;
  }
};

class B{
public:
  void func(){
    cout<<"I am in B"<<endl;
  }
};

class C:public A,public B{

};

int main(){
  C obj;
  obj.A :: func();
}
