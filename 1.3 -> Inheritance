Types Of Inheritance:-
1 -> Single inheritance
2 -> Multilevel inheritance
3 -> Multiple inheritance
4 -> Hierarchical inheritance
5 -> Hybrid inheritance

Single inheritance code:
------------------------
#include<iostream>
using namespace std;
 
// base class
class Vehicle {
  public:
    Vehicle()
    {
      cout << "This is a Vehicle\n";
    }
};
 
// sub class derived from a single base classes
class Car : public Vehicle {
 
};
 
// main function
int main()
{  
    // Creating object of sub class will
    // invoke the constructor of base classes
    Car obj;
    return 0;
}

Multiple inheritance
----------------------
#include <iostream>
using namespace std;
 
// first base class
class Vehicle {
public:
    Vehicle() { cout << "This is a Vehicle\n"; }
};
 
// second base class
class FourWheeler {
public:
    FourWheeler()
    {
        cout << "This is a 4 wheeler Vehicle\n";
    }
};
 
// sub class derived from two base classes
class Car : public Vehicle, public FourWheeler {
};
 
// main function
int main()
{
    // Creating object of sub class will
    // invoke the constructor of base classes.
    Car obj;
    return 0;
}

Multilevel Inheritance:
----------------------
#include <iostream>
using namespace std;
 
// base class
class Vehicle {
public:
    Vehicle() { cout << "This is a Vehicle\n"; }
};
 
// first sub_class derived from class vehicle
class fourWheeler : public Vehicle {
public:
    fourWheeler()
    {
        cout << "Objects with 4 wheels are vehicles\n";
    }
};
// sub class derived from the derived base class fourWheeler
class Car : public fourWheeler {
public:
    Car() { cout << "Car has 4 Wheels\n"; }
};
 
// main function
int main()
{
    // Creating object of sub class will
    // invoke the constructor of base classes.
    Car obj;
    return 0;
}

Hierarchical Inheritance:
------------------------
#include <iostream>
using namespace std;
 
// base class
class Vehicle {
public:
    Vehicle() { cout << "This is a Vehicle\n"; }
};
 
// first sub class
class Car : public Vehicle {
};
 
// second sub class
class Bus : public Vehicle {
};
 
// main function
int main()
{
    // Creating object of sub class will
    // invoke the constructor of base class.
    Car obj1;
    Bus obj2;
    return 0;
}

Hybrid (Virtual) Inheritance:
---------------------------
#include <iostream>
using namespace std;
 
// base class
class Vehicle {
public:
    Vehicle() { cout << "This is a Vehicle\n"; }
};
 
// base class
class Fare {
public:
    Fare() { cout << "Fare of Vehicle\n"; }
};
 
// first sub class
class Car : public Vehicle {
};
 
// second sub class
class Bus : public Vehicle, public Fare {
};
 
// main function
int main()
{
    // Creating object of sub class will
    // invoke the constructor of base class.
    Bus obj2;
    return 0;
}

Inhertitance ambiguity:
----------------------
#include<iostream>
using namespace std;

class A{
  public:
  void func(){
    cout<<"I am in A"<<endl;
  }
};

class B{
public:
  void func(){
    cout<<"I am in B"<<endl;
  }
};

class C:public A,public B{

};

int main(){
  C obj;
  obj.A :: func();
}
