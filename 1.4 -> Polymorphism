Compile-Time Polymorphism/Static/Early binding:
--------------------------
This type of polymorphism is achieved 
by function overloading or operator overloading.

code:
-----
#include<iostream>
using namespace std;
class math{
public:
  int add(int a,int b){
    return a+b;
  }

  int add(int a,int b,int c){
    return a+b+c;
  }

  int add(int a,double b){
    return a+b;
  }
};

int main(){
  math m;
  cout << m.add(10,20);
  cout << endl;
  cout << m.add(10,5.1);
}

overriding/Dynamic/Late Binding:
--------------------
#include <iostream>

class Animal {
public:
    // Virtual function
    virtual void sound() {
        std::cout << "Animal makes a sound!" << std::endl;
    }

    virtual ~Animal() {}  // Virtual destructor for proper cleanup
};

class Dog : public Animal {
public:
    // Overriding the base class function
    void sound() override {
        std::cout << "Dog barks!" << std::endl;
    }
};

class Cat : public Animal {
public:
    // Overriding the base class function
    void sound() override {
        std::cout << "Cat meows!" << std::endl;
    }
};

int main() {
    Animal* animal1 = new Dog();  // Base class pointer, pointing to derived class object
    Animal* animal2 = new Cat();

    animal1->sound();  // Calls Dog's sound() at runtime
    animal2->sound();  // Calls Cat's sound() at runtime

    delete animal1;
    delete animal2;

    return 0;
}


virtual keyword sa bhi achive kr skta hai
Dynamic poly
-------------------------
#include <iostream>

using namespace std;

// define a base class bird

class bird {
public:
    // virtual function
    virtual void display(){
        cout << "This is display in bird class." << "\n\n";
    }

    void print(){
        cout << "This is show in bird class." << "\n\n";
    }
};

// define a child class parrot

class parrot : public bird {
public:
    void display(){
        cout << "This is display in parrot class." << "\n\n";
    }
    void print(){
      cout << "This is show in parrot class." << "\n\n";
    }
};

int main(){
    // create a reference of class bird
    bird* brd;
    parrot p;
    brd = &p;
    // this will call the virtual function
    brd->display();
    // this will call the non-virtual function
    brd->print();
}
