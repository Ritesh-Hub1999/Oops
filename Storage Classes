It helps us to determines the lifetime, 
visibility, default value, and storage 
location which helps us to trace the 
existence of a particular variable during
the runtime of a program

Storage classes are:-
auto Storage Class
register Storage Class
extern Storage Class
static Storage Class
mutable Storage Class

->Auto Storage Class
The auto stands for automatic and all the
local variables that are declared in a 
block automatically belong to this class.

Properties of auto Storage Class Objects
Scope: Local
Default Value: Garbage Value
Memory Location: RAM
Lifetime: Till the end of its scope

->register Storage Class
register variables using the ‘register’
keyword which has the same functionality 
as that of the auto variables. The only 
difference is that the compiler tries to 
store these variables in the register of 
the microprocessor if a free register is 
available

Properties of register Storage Class Objects
Scope: Local
Default Value: Garbage Value
Memory Location: Register in CPU or RAM
Lifetime: Till the end of its scope

-> Extern Storage Class
the value is assigned to it in a different block 
and this can be overwritten/changed in a different
block as well

Properties of extern Storage Class Objects
Scope: Global
Default Value: Zero
Memory Location: RAM
Lifetime: Till the end of the program.

->Static Storage Class
initialized only once and exist until the 
termination of the program. Thus, no new 
memory is allocated because they are not 
re-declared. Global static variables can 
be accessed anywhere in the program.

Properties of static Storage Class
Scope: Local
Default Value: Zero
Memory Location: RAM
Lifetime: Till the end of the program

-> mutable Storage Class
 The keyword mutable is mainly used to allow
a particular data member of a const object to
be modified. 

Properties of mutable Storage Class
The mutable specifier does not affect the linkage or 
lifetime of the object. It will be the same as the 
normal object declared in that place.
